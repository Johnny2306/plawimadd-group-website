// prisma/schema.prisma

// Définition de la source de données (base de données)
datasource db {
  provider = "mysql" // Spécifie le type de base de données (MySQL dans ce cas)
  url        = env("DATABASE_URL") // Récupère l'URL de connexion depuis les variables d'environnement
}

// Définition du générateur de client Prisma
generator client {
  provider = "prisma-client-js" // Génère le client Prisma pour JavaScript/TypeScript
}

// Enum pour les rôles des utilisateurs
enum UserRole {
  USER  // Utilisateur standard
  ADMIN // Administrateur

  @@map("role") // Nom de l'enum en base de données (si différent)
}

// Modèle pour les utilisateurs
model User {
  id                    String    @id @unique @default(uuid()) @db.VarChar(255) // Clé primaire UUID, unique
  email                 String    @unique @db.VarChar(255) // Email de l'utilisateur (doit être unique)
  password              String    @db.VarChar(255) // Mot de passe haché
  firstName             String?   @db.VarChar(255) @map("firstName") // Prénom (optionnel)
  lastName              String?   @db.VarChar(255) @map("lastName")  // Nom de famille (optionnel)
  role                  UserRole? @default(USER) // Rôle de l'utilisateur (utilisation de l'enum UserRole)
  // CORRECTION ICI: Ajout de @unique à resetPasswordToken pour une meilleure sécurité
  resetPasswordToken    String?   @unique @db.VarChar(255) @map("resetPasswordToken") // Jeton de réinitialisation de mot de passe (optionnel)
  resetPasswordExpires  DateTime? @db.DateTime(0) @map("resetPasswordExpires") // Date d'expiration du jeton (optionnel)
  createdAt             DateTime  @default(now()) // Date de création de l'enregistrement
  updatedAt             DateTime  @updatedAt          // Date de la dernière mise à jour de l'enregistrement
  phoneNumber           String?   @db.VarChar(15) @map("phoneNumber") // Numéro de téléphone (optionnel)

  // Relations avec les autres modèles
  addresses             Address[]  // Adresses de l'utilisateur
  cartItems             CartItem[] // Articles dans le panier de l'utilisateur
  orders                Order[]    // Commandes passées par l'utilisateur
  reviews               Review[]   // Avis laissés par l'utilisateur

  @@map("users") // Nom de la table dans la base de données
}

// Modèle pour les adresses des utilisateurs
model Address {
  id            Int         @id @default(autoincrement()) // Clé primaire auto-incrémentée
  userId        String      @db.VarChar(255) // ID de l'utilisateur auquel l'adresse est liée
  fullName      String      @db.VarChar(255) // Nom complet du destinataire
  phoneNumber   String      @db.VarChar(20)  // Numéro de téléphone du destinataire
  pincode       String?     @db.VarChar(10)  // Code postal (optionnel)
  area          String      @db.Text             // Zone ou quartier
  city          String      @db.VarChar(100) // Ville
  state         String      @db.VarChar(100) // État/Région
  isDefault     Boolean     @default(false) @map("isDefault") // Indique si c'est l'adresse par défaut
  createdAt     DateTime    @default(now()) // Date de création de l'enregistrement
  updatedAt     DateTime    @updatedAt          // Date de la dernière mise à jour de l'enregistrement

  // NOUVEAUX CHAMPS AJOUTÉS :
  street        String?     @db.VarChar(255) // Rue (optionnel)
  country       String      @db.VarChar(100) // Pays (obligatoire, ajustez si besoin d'être optionnel)

  // Relation avec le modèle User
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // Relation avec le modèle Order (une adresse peut être associée à plusieurs commandes)
  orders        Order[]

  @@map("addresses") // Nom de la table dans la base de données
}

// Modèle pour les articles dans le panier
model CartItem {
  id        String    @id @default(uuid()) @db.VarChar(255) // Clé primaire UUID
  userId    String    @db.VarChar(255) // ID de l'utilisateur propriétaire du panier
  productId String    @db.VarChar(255) // ID du produit dans le panier
  quantity  Int       // Quantité du produit
  createdAt DateTime  @default(now()) // Date de création de l'enregistrement
  updatedAt DateTime  @updatedAt          // Date de la dernière mise à jour de l'enregistrement

  // Relations avec les modèles User et Product
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId], name: "user_product_unique") // Contrainte d'unicité pour éviter les doublons
  @@map("cart_items") // Nom de la table dans la base de données
}

// Modèle pour les catégories de produits
model Category {
  id          String    @id @default(uuid()) @db.VarChar(255) // Clé primaire UUID
  name        String    @unique @db.VarChar(255) // Nom de la catégorie (doit être unique)
  description String?   @db.Text             // Description de la catégorie (optionnel)
  imageUrl    String?   @db.VarChar(255) // URL de l'image de la catégorie (optionnel)
  products    Product[] // Relation inverse pour lister les produits d'une catégorie
  createdAt   DateTime  @default(now()) // Date de création de l'enregistrement
  updatedAt   DateTime  @updatedAt          // Date de la dernière mise à jour de l'enregistrement

  @@map("categories") // Nom de la table dans la base de données
}

// Enum pour les statuts de commande
enum OrderStatus {
  PENDING         // En attente de traitement
  PAID_SUCCESS    // Paiement réussi
  PAYMENT_FAILED  // Paiement échoué
  PROCESSING      // En cours de traitement
  SHIPPED         // Expédiée
  DELIVERED       // Livrée
  CANCELLED       // Annulée

  @@map("status") // Nom de l'enum en base de données (si différent)
}

// Enum pour les statuts de paiement
enum PaymentStatus {
  PENDING   // En attente de paiement
  COMPLETED // Paiement complété
  FAILED    // Paiement échoué
  REFUNDED  // Remboursé

  @@map("paymentStatus") // Nom de l'enum en base de données (si différent)
}

// Modèle pour les commandes
model Order {
  id                    String        @id @default(uuid()) @db.VarChar(255) // Clé primaire UUID
  userId                String        @db.VarChar(255) // ID de l'utilisateur qui a passé la commande
  totalAmount           Decimal       @db.Decimal(10, 2) // Montant total de la commande
  kakapayTransactionId  String?       @db.VarChar(255) @map("kakapayTransactionId") // ID de transaction Kkiapay (optionnel)
  status                OrderStatus?  @default(PENDING) // Statut de la commande (utilisation de l'enum OrderStatus)
  paymentStatus         PaymentStatus? @default(PENDING) @map("paymentStatus") // Statut du paiement (utilisation de l'enum PaymentStatus)

  // Champs d'adresse de livraison directement sur la commande (pour un snapshot au moment de la commande)
  shippingAddressLine1  String        @db.VarChar(255) @map("shippingAddressLine1")
  shippingAddressLine2  String?       @db.VarChar(255) @map("shippingAddressLine2")
  shippingCity          String        @db.VarChar(100) @map("shippingCity")
  shippingState         String        @db.VarChar(100) @map("shippingState")
  shippingZipCode       String?       @db.VarChar(20) @map("shippingZipCode") // Rendu optionnel
  shippingCountry       String        @db.VarChar(100) @map("shippingCountry")

  userEmail             String        @db.VarChar(255) // Email de l'utilisateur au moment de la commande
  userPhoneNumber       String?       @db.VarChar(20) @map("userPhoneNumber") // Rendu nullable
  currency              String        @db.VarChar(10)  // Devise de la commande

  orderDate             DateTime      @default(now()) // Date de la commande
  createdAt             DateTime      @default(now()) // Date de création de l'enregistrement
  updatedAt             DateTime      @updatedAt          // Date de la dernière mise à jour de l'enregistrement

  shippingAddressId     Int?          @map("shippingAddressId") // Clé étrangère vers l'adresse (optionnel)

  // Relations
  user                  User          @relation(fields: [userId], references: [id])
  shippingAddress       Address?      @relation(fields: [shippingAddressId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orderItems            OrderItem[]    // Articles spécifiques à cette commande
  payment               Payment?      // Relation optionnelle vers un enregistrement de paiement

  @@map("orders") // Nom de la table dans la base de données
}

// Modèle pour les articles individuels d'une commande
model OrderItem {
  id            String    @id @default(uuid()) @db.VarChar(255) // Clé primaire UUID
  orderId       String    @db.VarChar(255) // ID de la commande à laquelle l'article appartient
  productId     String    @db.VarChar(255) // ID du produit
  quantity      Int       // Quantité du produit dans cette commande
  priceAtOrder  Decimal   @db.Decimal(10, 2) @map("priceAtOrder") // Prix du produit au moment de la commande
  createdAt     DateTime  @default(now()) // Date de création de l'enregistrement
  updatedAt     DateTime  @updatedAt          // Date de la dernière mise à jour de l'enregistrement

  // Relations
  order         Order     @relation(fields: [orderId], references: [id])
  product       Product   @relation(fields: [productId], references: [id])

  @@map("order_items") // Nom de la table dans la base de données
}

// Modèle pour les paiements
model Payment {
  id            String        @id @default(uuid()) @db.VarChar(255) // Clé primaire UUID
  orderId       String        @unique @db.VarChar(255) // ID de la commande liée (doit être unique)
  paymentMethod String        @db.VarChar(100) @map("paymentMethod") // Méthode de paiement (ex: "Kkiapay", "Card")
  transactionId String?       @unique @db.VarChar(255) @map("transactionId") // ID de transaction unique (optionnel)
  amount        Decimal       @db.Decimal(10, 2) // Montant du paiement
  currency      String        @db.VarChar(10)  // Devise du paiement
  status        PaymentStatus? @default(PENDING) // Statut du paiement (utilisation de l'enum PaymentStatus)
  paymentDate   DateTime?     @map("paymentDate") // Date du paiement (optionnel)
  createdAt     DateTime      @default(now()) // Date de création de l'enregistrement
  updatedAt     DateTime      @updatedAt          // Date de la dernière mise à jour de l'enregistrement

  // Relation avec le modèle Order
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("payments") // Nom de la table dans la base de données
}

// Modèle pour les produits (AVEC LA MODIFICATION POUR LA RELATION DE CATEGORIE)
model Product {
  id          String    @id @default(uuid()) @db.VarChar(255) // Clé primaire UUID
  name        String    @db.VarChar(255) // Nom du produit
  description String?   @db.Text             // Description du produit (optionnel)
  price       Decimal   @db.Decimal(10, 2) // Prix du produit
  stock       Int       // Quantité en stock
  imgUrl      String?   @db.Text @map("imgUrl") // URL(s) de l'image (peut être un JSON string d'URLs)
  createdAt   DateTime  @default(now()) // Date de création de l'enregistrement
  updatedAt   DateTime  @updatedAt          // Date de la dernière mise à jour de l'enregistrement
  offerPrice  Decimal?  @db.Decimal(10, 2) @map("offerPrice") // Prix promotionnel (optionnel)
  rating      Float?    @default(0.0) // Ajout du champ rating
  brand       String?   @db.VarChar(255) // <-- AJOUTÉ
  color       String?   @db.VarChar(255) // <-- AJOUTÉ

  // --- CHANGEMENT ICI : REMPLACER LE CHAMP STRING PAR UNE RELATION ---
  categoryId  String    @db.VarChar(255) // Clé étrangère vers la catégorie
  category    Category  @relation(fields: [categoryId], references: [id]) // Relation avec le modèle Category
  // --- FIN DU CHANGEMENT ---

  cartItems   CartItem[] // Articles de panier contenant ce produit
  orderItems  OrderItem[] // Articles de commande contenant ce produit
  reviews     Review[]    // Avis pour ce produit

  @@map("products") // Nom de la table dans la base de données
}

// Modèle pour les avis (reviews)
model Review {
  id        String    @id @default(uuid()) @db.VarChar(255) // Clé primaire UUID
  productId String    @db.VarChar(255) // ID du produit évalué
  userId    String    @db.VarChar(255) // ID de l'utilisateur qui a laissé l'avis
  rating    Int       // Note (ex: de 1 à 5)
  comment   String?   @db.Text             // Commentaire (optionnel)
  createdAt DateTime  @default(now()) // Date de création de l'enregistrement
  updatedAt DateTime  @updatedAt          // Date de la dernière mise à jour de l'enregistrement

  // Relations
  product   Product   @relation(fields: [productId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@map("reviews") // Nom de la table dans la base de données
}
